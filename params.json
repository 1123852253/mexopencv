{"name":"mexopencv","tagline":"Collection and a development kit of matlab mex functions for OpenCV library","body":"# mexopencv\r\n\r\nThis software package provides matlab mex functions that interface a hundred of OpenCV APIs. Also the package contains a C++ class that converts between Matlab's native data types and OpenCV data types. The package is suitable for fast prototyping of OpenCV application in Matlab, use of OpenCV as an external toolbox in Matlab, and the development of a custom mex function.\r\n\r\nNote: The OpenCV development branch implemented the official Matlab API. Check the matlab module. (Oct 3, 2013)\r\n\r\nhttps://github.com/Itseez/opencv\r\n\r\nThere is [a user-contributed video tutorial](https://www.youtube.com/playlist?list=PLmcMMZCV897pofUfG1yH-8fcjpUTFUSaJ) for mexopencv (Thanks, Surya).\r\n\r\n## Download\r\n\r\n[Github](http://github.com/kyamagu/mexopencv)\r\n\r\nPlease refer the above link for how to compile the source code. Usually it is as easy as typing mexopencv.make in matlab.\r\n\r\nIf you're using git,\r\n\r\n```\r\ngit clone git://github.com/kyamagu/mexopencv.git\r\n```\r\n\r\n## Documentation\r\n\r\n * [User documentation](matlab/)\r\n * [Developer documentation](html/)\r\n\r\n## Getting started\r\n\r\nHere is an example of how simple it is to use an OpenCV function from matlab:\r\n\r\n```matlab\r\n% Load a face detector and an image\r\ndetector = cv.CascadeClassifier('haarcascade_frontalface_alt.xml');\r\nim = imread('myface.jpg');\r\n% Preprocess\r\ngr = cv.cvtColor(im, 'RGB2GRAY');\r\ngr = cv.equalizeHist(gr);\r\n% Detect\r\nboxes = detector.detect(gr, 'ScaleFactor',  1.3, ...\r\n                            'MinNeighbors', 2, ...\r\n                            'MinSize',      [30, 30]);\r\n% Draw results\r\nimshow(im);\r\nfor i = 1:numel(boxes)\r\n    rectangle('Position',  boxes{i}, ...\r\n              'EdgeColor', 'g');\r\nend\r\n```\r\n\r\nWould you like to use a camera input? No problem.\r\n\r\n```matlab\r\n% Connect to a camera\r\ncamera = cv.VideoCapture();\r\npause(2);\r\nfor i = 1:50\r\n    % Capture and show frame\r\n    frame = camera.read;\r\n    imshow(frame);\r\n    pause(0.3);\r\nend\r\n```\r\n\r\nThe package already contains more than 150 OpenCV functions/classes. You can check a list of supported functions in the [online documentation](matlab/). If there isn't your favorite one, you can easily add a new mex function through MxArray class. MxArray is a data conversion utility for Matlab's native array and OpenCV data types. With this class, your mex function is as simple as the following:\r\n\r\n```c++\r\n#include \"mexopencv.hpp\"\r\nvoid mexFunction( int nlhs, mxArray *plhs[],\r\n                  int nrhs, const mxArray *prhs[] )\r\n{\r\n    // Check arguments\r\n    if (nrhs!=2 || nlhs>1)\r\n        mexErrMsgIdAndTxt(\"myfunc:invalidArgs\", \"Wrong number of arguments\");\r\n \r\n    // Convert MxArray to cv::Mat and cv::Size\r\n    cv::Mat src = MxArray(prhs[0]).toMat(), dst;\r\n    cv::Size ksize = MxArray(prhs[1]).toSize();\r\n \r\n    // Use your favorite OpenCV function\r\n    cv::blur(src, dst, ksize);\r\n \r\n    // Convert cv::Mat back to mxArray*\r\n    plhs[0] = MxArray(dst);\r\n}\r\n```\r\n\r\nCheck the README file and the [developer documentation](html/) for detail.\r\n\r\n## License\r\n\r\nThe code may be redistributed under The BSD 3-Clause License.\r\n\r\n## FAQ\r\n\r\n### Windows\r\n\r\n_Compile error / Invalid MEX file_\r\n\r\nThere could be a various possible reasons.\r\n\r\nFirst make sure you have correctly configured the system path to use OpenCV. Your Path variable should contain an appropriate path to the dll files (e.g., `c:\\opencv\\build\\x86\\vc10\\bin`). Be careful that the architecture (x86 or x64) should match your matlab architecture but not your OS. Also VC version (vc9 or vc10) should match the mex setup (and probably matlab's internal runtime). For example, if you're running Matlab 32-bit in Windows 7 64-bit with Visual Studio 2010 Express, you would use x86 and vc10. If you're running Matlab 64-bit in Windows 7 64-bit with Visual Studio 2010 Express and Windows SDK compiler, you would use x64 and vc10.\r\n\r\nNext, make sure you are using the supported version of VC compiler ([Supported compilers](http://www.mathworks.com/support/compilers/)). Note that Windows 64-bit users need to use Windows SDK compiler. Using VC2010 compiler in Windows 64-bit leads to Matlab crash. Use mex -setup command in matlab to change the compiler.\r\n\r\nWhenever you change the compiler setting, first clear all the previously built binaries with mexopencv.make('clean') command. After that, use mexopencv.make again to compile the source.\r\n\r\n### Linux\r\n\r\n_Invalid MEX file_\r\n\r\nIn most of cases, mexopencv gives an error due to conflicting internal dynamic libraries. You will need to find out which library is causing the conflict. Following is the steps to locate such libraries using ldd tool.\r\n\r\nUse `ldd` in unix shell.\r\n\r\n```bash\r\n$ ldd /path/to/mexopencv/+cv/private/imread.mexa64\r\n```\r\n\r\nUse `ldd` in matlab shell.\r\n\r\n```\r\n>> !ldd /path/to/mexopencv/+cv/private/imread.mexa64\r\n```\r\n\r\nFind any difference in the loaded libraries. (Hint: use diff tool.) Usually such libraries are causing error. If you find any, such as libstdc++ or libgcc_s, put the one found in unix shell in the LD_PRELOAD variable before launching matlab. For example,\r\n\r\n```bash\r\nLD_PRELOAD=/usr/lib/x86_64-linux-gnu/libstdc++.so.6:/lib/x86_64-linux-gnu/libgcc_s.so.1 matlab\r\n```\r\n\r\nIt is probably handy to use bash alias to specify the above long command after you find the erroneous library. Put the following in your .bashrc, for example.\r\n\r\n```bash\r\nalias matlab='LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libstdc++.so.6:/lib/x86_64-linux-gnu/libgcc_s.so.1 matlab'\r\n```\r\n\r\nNote that if you have the computer vision toolbox from Mathworks, you almost always see this error, because that toolbox internally loads its own version of opencv. In that case, use LD_PRELOAD to force loading your opencv installation.\r\n\r\n### Mac OS X\r\n\r\n_Compile error_\r\n\r\nIn Mac OS X, Matlab may require additional setup to use mex depending on the OS version. See [Mathworks support](http://www.mathworks.com/support/solutions/en/data/1-FR6LXJ/) for more information.\r\n\r\n_OS X 10.9 and XCode 5_\r\n\r\nDue to the change in the default C++ runtime in OS X 10.9, you probably need to tweak a few configurations in mexopts.sh to avoid compile issues. If you haven't run mex -setup in Matlab, please do so first and edit mexopts.sh and change a few variables. Following shows an example.\r\n\r\n```bash\r\nCC='clang'\r\nCXX='clang++'\r\nSDKROOT='/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/'\r\nMACOSX_DEPLOYMENT_TARGET='10.9'\r\nCLIBS=\"$CLIBS -lc++\"\r\nCXXFLAGS=\"-fno-common -no-cpp-precomp -fexceptions -arch $ARCHS -isysroot $SDKROOT -mmacosx-version-min=$MACOSX_DEPLOYMENT_TARGET -std=c++11 -stdlib=libc++ -DCHAR16_T\"\r\nCXXLIBS=\"$MLIBS -lc++\"\r\n```\r\n\r\n_Invalid MEX file_\r\n\r\nIn OS X environment, runtime error can happen when the version of your system library conflicts with matlab's internal library. Try setting the DYLD_INSERT_LIBRARIES variable to force matlab to use the system's library. For example,\r\n\r\n```bash\r\nDYLD_INSERT_LIBRARIES=/opt/local/lib/libtiff.3.dylib /Applications/MATLAB_R2012a.app/bin/matlab\r\n```\r\n\r\nTo find which library is causing an error, use `otool -L` command. See the Invalid MEX file instruction in the Linux section above.\r\n\r\n### General usage\r\n\r\n_0-based index vs 1-based index_\r\n\r\nOpenCV uses 0-based index while matlab uses 1-based index. That is, the top left pixel is `(0,0)` in OpenCV whereas matlab treats it as `(1,1)`. mexopencv does NOT convert image coordinates. Be careful when accessing a function that deals with image coordinates.\r\n\r\n_Channeled array_\r\n\r\nOpenCV often uses channels as dimensions of coordinate representation, as seen in perspectiveTransform. In matlab, you can make these channeled array by creating 1-by-N-by-d array for an N element array of d-dimensional vectors. Hint: use shiftdim function to convert from/to N-by-d numeric array in matlab.","google":"UA-19721864-1","note":"Don't delete this file! It's used internally to help with page regeneration."}