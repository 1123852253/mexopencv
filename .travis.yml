#
# Travis CI build script.
# https://travis-ci.org/kyamagu/mexopencv
#

language: cpp
compiler: gcc
os: linux

# Ubuntu image: 14.04 (Trusty) LTS Server Edition 64-bit
dist: trusty

# full Ubuntu VM (sudo enabled) vs. container-based environment
sudo: required

# whitelisted branches to build
branches:
  only:
    - master

# global environment variables
env:
  global:
    # OpenCV build options
    # (CMake generators: "Unix Makefiles", "Ninja")
    - CMAKE_GEN=Ninja
    - INSTALL_PREFIX=/usr/local

    # Octave options + optional Octave-Forge packages to install
    # (Note: latest octave-image requires a C++11 compiler to build, this
    # works in Trusty with gcc-4.8 but fails in Precise with gcc-4.6)
    - OCTAVERC=$HOME/.octaverc
    - OCTAVE_OPTS="--no-gui --no-window-system"
    - OCT_STATS=yes
    - OCT_IMAGE=no

    # mexopencv options
    # (Note: dont use too many Make parallel jobs on VM)
    - MCV_ROOT=$(pwd)
    - MAKE_OPTS="WITH_OCTAVE=true WITH_CONTRIB=true NO_CV_PKGCONFIG_HACK=true"
    - MAKE_EXTRA=-j2
    - DOXY=yes

install:
  #HACK: Travis adds a PPA for Redis, but it also contains GraphicsMagick lib
  # which conflicts with the one Octave was compiled against, so we remove it
  - sudo rm -f /etc/apt/sources.list.d/rwky-redis.list

  # third-party PPA with Octave 4.0.2
  - sudo add-apt-repository -y ppa:octave/stable
  - sudo apt-get update -qq

  # install build tools: CMake, Ninja, pkg-config, Doxygen
  - sudo apt-get install -y cmake pkg-config
  - if [ "$CMAKE_GEN" = "Ninja" ]; then sudo apt-get install -y ninja-build ; fi
  - if [ "$DOXY" = "yes" ]; then sudo apt-get install -y doxygen ; fi

  # install Octave + optional statistics/image packages
  - sudo apt-get install -y octave liboctave-dev
  - if [ "$OCT_STATS" = "yes" ]; then octave-cli $OCTAVE_OPTS --eval "try, pkg install -forge -local io statistics, end" ; fi
  - if [ "$OCT_IMAGE" = "yes" ]; then octave-cli $OCTAVE_OPTS --eval "try, pkg install -forge -local image, end" ; fi

  # install some OpenCV dependencies
  - sudo apt-get install -y zlib1g-dev libjpeg8-dev libpng12-dev libtiff4-dev libjasper-dev libopenexr-dev
  - sudo apt-get install -y libavcodec-dev libavformat-dev libswscale-dev
  - sudo apt-get install -y libxine2-dev libv4l-dev libdc1394-22-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev
  - sudo apt-get install -y libgtk2.0-dev libtbb-dev libeigen3-dev libblas-dev liblapack-dev liblapacke-dev libatlas-base-dev
  - sudo apt-get install -y libhdf5-dev libprotobuf-dev libgflags-dev libgoogle-glog-dev

  # build OpenCV 3.3.0 from source (opencv + opencv_contrib)
  - mkdir $HOME/cv330 && pushd $HOME/cv330
  - wget -O opencv.zip https://github.com/opencv/opencv/archive/3.3.0.zip
  - wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/3.3.0.zip
  - unzip opencv.zip > /dev/null
  - unzip opencv_contrib.zip > /dev/null
  - mkdir build && cd build
  - cmake -G "$CMAKE_GEN" -Wno-dev
      -DBUILD_DOCS:BOOL=OFF
      -DBUILD_EXAMPLES:BOOL=OFF
      -DBUILD_PACKAGE:BOOL=OFF
      -DBUILD_PERF_TESTS:BOOL=OFF
      -DBUILD_TESTS:BOOL=OFF
      -DWITH_CUDA:BOOL=OFF
      -DWITH_CUFFT:BOOL=OFF
      -DWITH_ITT:BOOL=OFF
      -DWITH_MATLAB:BOOL=OFF
      -DWITH_OPENCL:BOOL=OFF
      -DWITH_VTK:BOOL=OFF
      -DCV_TRACE:BOOL=OFF
      -DBUILD_opencv_apps:BOOL=OFF
      -DBUILD_opencv_cuda:BOOL=OFF
      -DBUILD_opencv_java:BOOL=OFF
      -DBUILD_opencv_python2:BOOL=OFF
      -DBUILD_opencv_python3:BOOL=OFF
      -DBUILD_opencv_ts:BOOL=OFF
      -DBUILD_opencv_viz:BOOL=OFF
      -DBUILD_opencv_world:BOOL=OFF
      -DBUILD_opencv_contrib_world:BOOL=OFF
      -DBUILD_opencv_matlab:BOOL=OFF
      -DBUILD_opencv_ccalib:BOOL=OFF
      -DBUILD_opencv_cvv:BOOL=OFF
      -DBUILD_opencv_hdf:BOOL=OFF
      -DBUILD_opencv_sfm:BOOL=OFF
      -DBUILD_opencv_structured_light:BOOL=OFF
      -DBUILD_opencv_surface_matching:BOOL=OFF
      -DCMAKE_BUILD_TYPE:STRING=RELEASE
      -DCMAKE_INSTALL_PREFIX:PATH=$INSTALL_PREFIX
      -DOPENCV_ENABLE_NONFREE:BOOL=ON
      -DOPENCV_EXTRA_MODULES_PATH:PATH=$HOME/cv330/opencv_contrib-3.3.0/modules $HOME/cv330/opencv-3.3.0
  - cmake --build .
  - sudo cmake --build . --target install
  - popd

  # finish OpenCV installation
  - export PATH=$PATH:$INSTALL_PREFIX/bin
  - export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$INSTALL_PREFIX/lib/pkgconfig
  - sudo sh -c 'echo "$INSTALL_PREFIX/lib" > /etc/ld.so.conf.d/opencv.conf'
  - sudo ldconfig

before_script:
  # create .octaverc file (to setup path and load required packages on start)
  #HACK: we also add private directories on path, http://savannah.gnu.org/bugs/?45444
  - touch $OCTAVERC
  - echo "crash_dumps_octave_core(false);" >> $OCTAVERC
  - echo "more off" >> $OCTAVERC
  - if [ "$OCT_STATS" = "yes" ]; then echo "try, pkg load statistics, end" >> $OCTAVERC ; fi
  - if [ "$OCT_IMAGE" = "yes" ]; then echo "try, pkg load image, end" >> $OCTAVERC ; fi
  - echo "warning('off', 'Octave:GraphicsMagic-Quantum-Depth');" >> $OCTAVERC
  - echo "warning('off', 'Octave:shadowed-function');" >> $OCTAVERC
  - echo "cd('$MCV_ROOT');" >> $OCTAVERC
  - echo "addpath('$MCV_ROOT');" >> $OCTAVERC
  - echo "addpath(fullfile('$MCV_ROOT','+cv','private'));" >> $OCTAVERC
  - echo "addpath(fullfile('$MCV_ROOT','opencv_contrib'));" >> $OCTAVERC
  - echo "addpath(fullfile('$MCV_ROOT','opencv_contrib','+cv','private'));" >> $OCTAVERC

script:
  # compile mexopencv
  - cd $MCV_ROOT
  - make $MAKE_OPTS $MAKE_EXTRA all contrib

  # build docs
  - if [ "$DOXY" = "yes" ]; then make $MAKE_OPTS doc ; fi

  # run test suite
  - make $MAKE_OPTS test
